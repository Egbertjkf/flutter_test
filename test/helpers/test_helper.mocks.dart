// Mocks generated by Mockito 5.4.4 from annotations
// in restaurantour/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurantour/core/errors/failures.dart' as _i5;
import 'package:restaurantour/data/data_source/restaurants_remote_data_source.dart'
    as _i7;
import 'package:restaurantour/data/models/restaurant_model.dart' as _i8;
import 'package:restaurantour/domain/entities/restaurant_entity.dart' as _i6;
import 'package:restaurantour/domain/repositories/restaurant_repository.dart'
    as _i3;
import 'package:restaurantour/domain/usecases/get_restaurants.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRestaurantsRepository_1 extends _i1.SmartFake
    implements _i3.RestaurantsRepository {
  _FakeRestaurantsRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RestaurantsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantsRepository extends _i1.Mock
    implements _i3.RestaurantsRepository {
  MockRestaurantsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.RestaurantEntity>>>
      getRestaurantsList({int? offset = 0}) => (super.noSuchMethod(
            Invocation.method(
              #getRestaurantsList,
              [],
              {#offset: offset},
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i6.RestaurantEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.RestaurantEntity>>(
              this,
              Invocation.method(
                #getRestaurantsList,
                [],
                {#offset: offset},
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.RestaurantEntity>>>);
}

/// A class which mocks [RestaurantsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantsRemoteDataSource extends _i1.Mock
    implements _i7.RestaurantsRemoteDataSource {
  MockRestaurantsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i8.RestaurantModel>> getRestaurants({int? offset = 0}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurants,
          [],
          {#offset: offset},
        ),
        returnValue: _i4.Future<List<_i8.RestaurantModel>>.value(
            <_i8.RestaurantModel>[]),
      ) as _i4.Future<List<_i8.RestaurantModel>>);
}

/// A class which mocks [GetRestaurantsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRestaurantsUseCase extends _i1.Mock
    implements _i9.GetRestaurantsUseCase {
  MockGetRestaurantsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RestaurantsRepository get restaurantsRepository => (super.noSuchMethod(
        Invocation.getter(#restaurantsRepository),
        returnValue: _FakeRestaurantsRepository_1(
          this,
          Invocation.getter(#restaurantsRepository),
        ),
      ) as _i3.RestaurantsRepository);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.RestaurantEntity>>> execute(
          {int? offset = 0}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#offset: offset},
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.RestaurantEntity>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.RestaurantEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
            {#offset: offset},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.RestaurantEntity>>>);
}

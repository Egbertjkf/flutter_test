// Mocks generated by Mockito 5.4.4 from annotations
// in restaurantour/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:bloc/bloc.dart' as _i15;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurantour/core/errors/failures.dart' as _i8;
import 'package:restaurantour/data/data_source/restaurants_remote_data_source.dart'
    as _i10;
import 'package:restaurantour/data/models/restaurant_details_model.dart' as _i3;
import 'package:restaurantour/data/models/restaurant_model.dart' as _i11;
import 'package:restaurantour/data/models/review_model.dart' as _i12;
import 'package:restaurantour/domain/entities/restaurant_entity.dart' as _i9;
import 'package:restaurantour/domain/repositories/restaurant_repository.dart'
    as _i4;
import 'package:restaurantour/domain/usecases/get_restaurants.dart' as _i5;
import 'package:restaurantour/presentation/bloc/restaurants_bloc.dart' as _i13;
import 'package:restaurantour/presentation/bloc/restaurants_event.dart' as _i14;
import 'package:restaurantour/presentation/bloc/restaurants_state.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRestaurantDetailsModel_1 extends _i1.SmartFake
    implements _i3.RestaurantDetailsModel {
  _FakeRestaurantDetailsModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRestaurantsRepository_2 extends _i1.SmartFake
    implements _i4.RestaurantsRepository {
  _FakeRestaurantsRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetRestaurantsUseCase_3 extends _i1.SmartFake
    implements _i5.GetRestaurantsUseCase {
  _FakeGetRestaurantsUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRestaurantsState_4 extends _i1.SmartFake
    implements _i6.RestaurantsState {
  _FakeRestaurantsState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RestaurantsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantsRepository extends _i1.Mock
    implements _i4.RestaurantsRepository {
  MockRestaurantsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.RestaurantEntity>>>
      getRestaurantsList({int? offset = 0}) => (super.noSuchMethod(
            Invocation.method(
              #getRestaurantsList,
              [],
              {#offset: offset},
            ),
            returnValue: _i7.Future<
                    _i2.Either<_i8.Failure, List<_i9.RestaurantEntity>>>.value(
                _FakeEither_0<_i8.Failure, List<_i9.RestaurantEntity>>(
              this,
              Invocation.method(
                #getRestaurantsList,
                [],
                {#offset: offset},
              ),
            )),
          ) as _i7.Future<_i2.Either<_i8.Failure, List<_i9.RestaurantEntity>>>);
}

/// A class which mocks [RestaurantsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantsRemoteDataSource extends _i1.Mock
    implements _i10.RestaurantsRemoteDataSource {
  MockRestaurantsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i11.RestaurantModel>> getRestaurants({int? offset = 0}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurants,
          [],
          {#offset: offset},
        ),
        returnValue: _i7.Future<List<_i11.RestaurantModel>>.value(
            <_i11.RestaurantModel>[]),
      ) as _i7.Future<List<_i11.RestaurantModel>>);

  @override
  _i7.Future<_i3.RestaurantDetailsModel> getRestaurantDetails(
          {required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurantDetails,
          [],
          {#id: id},
        ),
        returnValue: _i7.Future<_i3.RestaurantDetailsModel>.value(
            _FakeRestaurantDetailsModel_1(
          this,
          Invocation.method(
            #getRestaurantDetails,
            [],
            {#id: id},
          ),
        )),
      ) as _i7.Future<_i3.RestaurantDetailsModel>);

  @override
  _i7.Future<List<_i12.ReviewModel>> getReviewsList({required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReviewsList,
          [],
          {#id: id},
        ),
        returnValue:
            _i7.Future<List<_i12.ReviewModel>>.value(<_i12.ReviewModel>[]),
      ) as _i7.Future<List<_i12.ReviewModel>>);
}

/// A class which mocks [GetRestaurantsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRestaurantsUseCase extends _i1.Mock
    implements _i5.GetRestaurantsUseCase {
  MockGetRestaurantsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.RestaurantsRepository get restaurantsRepository => (super.noSuchMethod(
        Invocation.getter(#restaurantsRepository),
        returnValue: _FakeRestaurantsRepository_2(
          this,
          Invocation.getter(#restaurantsRepository),
        ),
      ) as _i4.RestaurantsRepository);

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.RestaurantEntity>>> execute(
          {int? offset = 0}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#offset: offset},
        ),
        returnValue: _i7
            .Future<_i2.Either<_i8.Failure, List<_i9.RestaurantEntity>>>.value(
            _FakeEither_0<_i8.Failure, List<_i9.RestaurantEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
            {#offset: offset},
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, List<_i9.RestaurantEntity>>>);
}

/// A class which mocks [RestaurantsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantsBloc extends _i1.Mock implements _i13.RestaurantsBloc {
  MockRestaurantsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.GetRestaurantsUseCase get getRestaurantsUseCase => (super.noSuchMethod(
        Invocation.getter(#getRestaurantsUseCase),
        returnValue: _FakeGetRestaurantsUseCase_3(
          this,
          Invocation.getter(#getRestaurantsUseCase),
        ),
      ) as _i5.GetRestaurantsUseCase);

  @override
  List<_i9.RestaurantEntity> get favList => (super.noSuchMethod(
        Invocation.getter(#favList),
        returnValue: <_i9.RestaurantEntity>[],
      ) as List<_i9.RestaurantEntity>);

  @override
  _i6.RestaurantsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRestaurantsState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.RestaurantsState);

  @override
  _i7.Stream<_i6.RestaurantsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i6.RestaurantsState>.empty(),
      ) as _i7.Stream<_i6.RestaurantsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i14.RestaurantsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i14.RestaurantsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i6.RestaurantsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i14.RestaurantsEvent>(
    _i15.EventHandler<E, _i6.RestaurantsState>? handler, {
    _i15.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i15.Transition<_i14.RestaurantsEvent, _i6.RestaurantsState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void onChange(_i15.Change<_i6.RestaurantsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
